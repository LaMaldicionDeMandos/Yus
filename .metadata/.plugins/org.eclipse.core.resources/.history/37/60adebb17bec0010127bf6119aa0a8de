package org.opensource.pasut.yus.module.localzation
{
	import org.as3commons.bytecode.proxy.IProxyFactory;
	import org.as3commons.bytecode.proxy.impl.ProxyFactory;
	import org.as3commons.reflect.Type;
	import org.opensource.pasut.yus.configuration.MappingProccessor;
	import org.opensource.pasut.yus.injection.Mapping;
	
	internal class LocalizationProcessor implements MappingProccessor
	{
		private var proxyFactory:IProxyFactory;
		public function LocalizationProcessor()
		{
			proxyFactory = new ProxyFactory();
		}
		
		public function proccess(mapping:Mapping):void
		{
			proccessClass(getType(mapping),mapping);
		}
		
		private function getType(mapping:Mapping):Type{
			if(mapping.singleton!=null) return Type.forInstance(mapping.singleton);
			return (mapping.to!=null)? Type.forClass(mapping.to) : Type.forClass(mapping.type);
		}
		
		private function proccessClass(type:Type,mapping:Mapping):void{
			var metadatas:Array = type.getMetadataContainers("Localized"); 
			if(metadatas==null || metadatas.length==0) return;
			mapping.customCreator = new LocalizationCreator(proxyFactory);
			proccessLocalized(type);
		}
		
		private function proccessLocalized(type:Type):void{
			
		}
	}
}